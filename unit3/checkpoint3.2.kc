// XMega65 Kernal Development Template
// Each function of the kernal is a no-args function
// The functions are placed in the SYSCALLS table surrounded by JMP and NOP

import "string"

// Use a linker definition file (put the previous listing into that file)
#pragma link("mega65hyper.ld")

// Some definitions of addresses and special values that this program uses

const char* RASTER =0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021; 
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE =1;

// Some text to display

char[] MESSAGE = "Checkpoint 3.1 by ocba0001";

//Needed to maintain a pointer to the current line on the screen, as well as the position on that line

unsigned char *current_screen_line = $0400;
unsigned char current_screen_x = 0;

void main(){
}

void exit_hypervisor(){
	// Trigger exit from Hypervisor Mode
	*(unsigned char *)$D67F = $01;
}

void print_to_screen(char *message){
	while(*message){
		*(current_screen_line + current_screen_x) = *message++;
		current_screen_x++;
	}
}

void print_newline(){
	current_screen_line += 40;
	current_screen_x = 0;
}

void print_hex(unsigned short value)
{
	char[5] hex;
	unsigned char i;
	for (i=0; i<4;i++){
		if (value<0xa000) hex[i]='0'+(char) (value>>12);
		else hex[i]=(char)(value>>12)-9;
		value<<=4;
	}
	hex[4]=0;
	print_to_screen(hex);
}

// test memory part 
void test_memory(){
	unsigned short mem_start = $0800;
	unsigned short mem_end = $0800;
	volatile unsigned char *p;
	byte flag = 0;

	for (p = $0800; p < $8000; p++){
		for (byte i = 0; i < 255; i++){
			if(*p !=i){
				flag = 1;
				print_to_screen("memory error");
				print_hex((unsigned short)p);
				print_newline();
				break;
			}
		}
		if(flag==1) break;
		mem_end = p; 
	}
	print_to_screen("memory found at $");
	print_hex(mem_start);
	print_to_screen(" - $");
	print_hex((unsigned short)p);
}

void print_raster_lines(){
	while(true){
		if(*RASTER==54 || *RASTER==66){
			*BGCOL = WHITE; 
		} else {
		*BGCOL = BLACK;
	}
}
}

// Here are a couple sample SYSCALL handlers that just display a character on the screen 

void syscall0() {
	exit_hypervisor();
}

void syscall1() {
	exit_hypervisor();
}

void syscall2() {
	exit_hypervisor();
}

void syscall3(){
	exit_hypervisor();
}


void syscall4() {
	exit_hypervisor();
}


void syscall5(){
	exit_hypervisor();
}


void syscall6() {
	exit_hypervisor();
}


void syscall7() {
	exit_hypervisor();
}


void syscall8() {
	exit_hypervisor();
}


void syscall9() {
	exit_hypervisor();
}


void syscallA() {
	exit_hypervisor();
}

void syscallB() {
	exit_hypervisor();
}

void syscallC() {
	exit_hypervisor();
}

void syscallD(){
	exit_hypervisor();
}


void syscallE(){
	exit_hypervisor();
}


void syscallF(){
	exit_hypervisor();
}

void syscall10() {
	exit_hypervisor();
}

void securentr(){
	exit_hypervisor();
}

void securexit(){
	exit_hypervisor();
}

void syscall13() {
	exit_hypervisor();
}


void syscall14(){
	exit_hypervisor();
}

void syscall15() {
	exit_hypervisor();
}


void syscall16() {
	exit_hypervisor();
}

void syscall17() {
	exit_hypervisor();
}

void syscall18() {
	exit_hypervisor();
}

void syscall19() {
	exit_hypervisor();
}


void syscall1A(){
	exit_hypervisor();
}

void syscall1B() {
	exit_hypervisor();
}

void syscall1C() {
	exit_hypervisor();
}

void syscall1D(){
	exit_hypervisor();
}

void syscall1E() {
	exit_hypervisor();
}

void syscall1F() {
	exit_hypervisor();
}

void syscall20() {
	exit_hypervisor();
}


void syscall21() {
	exit_hypervisor();
}


void syscall22() {
	exit_hypervisor();
}

void syscall23() {
	exit_hypervisor();
}


void syscall24() {
	exit_hypervisor();
}


void syscall25() {
	exit_hypervisor();
}

void syscall26() {
	exit_hypervisor();
}


void syscall27() {
	exit_hypervisor();
}


void syscall28(){
	exit_hypervisor();
}


void syscall29() {
	exit_hypervisor();
}


void syscall2A() {
	exit_hypervisor();
}


void syscall2B() {
	exit_hypervisor();
}

void syscall2C() {
	exit_hypervisor();
}


void syscall2D() {
	exit_hypervisor();
}


void syscall2E() {
	exit_hypervisor();
}

void syscall2F() {
	exit_hypervisor();
}


void syscall30() {
	exit_hypervisor();
}


void syscall31() {
	exit_hypervisor();
}

void syscall32() {
	exit_hypervisor();
}


void syscall33() {
	exit_hypervisor();
}

void syscall34(){
	exit_hypervisor();
}

void syscall35() {
	exit_hypervisor();
}

void syscall36() {
	exit_hypervisor();
}

void syscall37() {
	exit_hypervisor();
}

void syscall38() {
	exit_hypervisor();
}

void syscall39() {
	exit_hypervisor();
}

void syscall3A() {
	exit_hypervisor();
}


void syscall3B() {
	exit_hypervisor();
}

void syscall3C() {
	exit_hypervisor();
}


void syscall3D() {
	exit_hypervisor();
}

void syscall3E() {
	exit_hypervisor();
}


void syscall3F() {
	exit_hypervisor();
}

void reset(){
	// Initialise screen memory, and selects correct font
	*VIC_MEMORY = 0x14;
	// Fill the screen with spaces
	memset (SCREEN, ' ',40*25);
	// Set the colour of every character on the screen to white
	memset (COLS,WHITE,40*25);

	// Print my message
	print_to_screen("ocba0001 operating system starting..");
	print_newline();
	print_to_screen("testing hardware");
	print_newline();

	test_memory();
	print_newline();
	print_to_screen("finished testing hardware");

	while(true){
	}
}


void pagfault(){
	exit_hypervisor();
}
void restorkey(){
	exit_hypervisor();
}
void alttabkey(){
	exit_hypervisor();
}
void vf011rd(){
	exit_hypervisor();
}
void vf011wr(){
	exit_hypervisor();
}
void reserved(){
	exit_hypervisor();
}
void cpukil(){
	exit_hypervisor();
}

void undefined_trap(){
	exit_hypervisor();
}


// Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.

#pragma data_seg(Syscall)

// The structure of each entry point is JMP <handler address> + NOP.
// We have a char (xjmp) to hold the opcode for the JMP instruction

struct SysCall{
  char xjmp;
  void()* syscall;
  char xnop;
};

const char JMP = 0x4c;
const char NOP = 0xea;

export struct SysCall[] SYSCALLS = {
	{ JMP, &syscall0, NOP },
	{ JMP, &syscall1, NOP },
	{ JMP, &syscall2, NOP },
	{ JMP, &syscall3, NOP },
	{ JMP, &syscall4, NOP },
	{ JMP, &syscall5, NOP },
	{ JMP, &syscall6, NOP },
	{ JMP, &syscall7, NOP },
	{ JMP, &syscall8, NOP },
	{ JMP, &syscall9, NOP },
	{ JMP, &syscallA, NOP },
	{ JMP, &syscallB, NOP },
	{ JMP, &syscallC, NOP },
	{ JMP, &syscallD, NOP },
	{ JMP, &syscallE, NOP },
	{ JMP, &syscallF, NOP },
	{ JMP, &syscall10, NOP },
	{ JMP, &securentr, NOP },
	{ JMP, &securexit, NOP }, 
	{ JMP, &syscall13, NOP },
	{ JMP, &syscall14, NOP },
	{ JMP, &syscall15, NOP },
	{ JMP, &syscall16, NOP },
	{ JMP, &syscall17, NOP },
	{ JMP, &syscall18, NOP },
	{ JMP, &syscall19, NOP },
	{ JMP, &syscall1A, NOP },
	{ JMP, &syscall1B, NOP },
	{ JMP, &syscall1C, NOP },
	{ JMP, &syscall1D, NOP },
	{ JMP, &syscall1E, NOP },
	{ JMP, &syscall1F, NOP },
	{ JMP, &syscall20, NOP },
	{ JMP, &syscall21, NOP },
	{ JMP, &syscall22, NOP },
	{ JMP, &syscall23, NOP },
	{ JMP, &syscall24, NOP },
	{ JMP, &syscall25, NOP },
	{ JMP, &syscall26, NOP },
	{ JMP, &syscall27, NOP },
	{ JMP, &syscall28, NOP },
	{ JMP, &syscall29, NOP },
	{ JMP, &syscall2A, NOP },
	{ JMP, &syscall2B, NOP },
	{ JMP, &syscall2C, NOP },
	{ JMP, &syscall2D, NOP },
	{ JMP, &syscall2E, NOP },
	{ JMP, &syscall2F, NOP },
	{ JMP, &syscall30, NOP },
	{ JMP, &syscall31, NOP },
	{ JMP, &syscall32, NOP },
	{ JMP, &syscall33, NOP },
	{ JMP, &syscall34, NOP },
	{ JMP, &syscall35, NOP },
	{ JMP, &syscall36, NOP },
	{ JMP, &syscall37, NOP },
	{ JMP, &syscall38, NOP },
	{ JMP, &syscall39, NOP },
	{ JMP, &syscall3A, NOP },
	{ JMP, &syscall3B, NOP },
	{ JMP, &syscall3C, NOP },
	{ JMP, &syscall3D, NOP },
	{ JMP, &syscall3E, NOP },
	{ JMP, &syscall3F, NOP }
};

export align(0x100) struct SysCall[] TRAPS = {
	{JMP, &reset, NOP},
  	{JMP, &pagfault, NOP},
  	{JMP, &restorkey, NOP},  
  	{JMP, &alttabkey, NOP},
  	{JMP, &vf011rd, NOP},
  	{JMP, &vf011wr, NOP},
  	{JMP, &reserved, NOP},
  	{JMP, &cpukil, NOP}
};